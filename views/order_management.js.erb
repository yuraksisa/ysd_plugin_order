 require(['jquery', 'YSDEntityManagement', 'YSDForms', 'YSDMemoryDataSource', 'YSDRemoteDataSource',
          'YSDSelectSelector', 'YSDGui', 'jquery.validate','jquery.formparams',
          'jquery.ui', 'jquery.ui.datepicker-es', 'jquery.ui.datepicker.validation',
          'json2','bootstrap', 'jquery.calendar'],
          function($, EntityManagement, YSDForms, MemoryDataSource, RemoteDataSource, SelectSelector, YSDGui) {

 
  function OrderHook() {
 	   
    this.order_item_id = null;
    this.order_item_idx = null;

    this.statusDescription = {
       'pending_confirmation' : '<span class="label label-warning"><%= t.booking_status.pending_confirmation%></span>',
       'confirmed' : '<span class="label label-success"><%= t.booking_status.confirmed%></span>',
       'cancelled' : '<span class="label label-danger"><%= t.booking_status.cancelled%></span>'
    }
     
    this.paymentStatusDescription = {
       'none' : '<%= t.booking_payment_status.none%>',
       'deposit' : '<span class="label label-primary"><%= t.booking_payment_status.deposit%></span>',
       'total' : '<span class="label label-success"><%= t.booking_payment_status.total%></span>',
       'refunded': '<span class="label label-danger"><%= t.booking_payment_status.refunded%></span>'
    }

    this.chargeStatusDescription = {
       'pending': '<%= t.charge_status.pending %>',
       'processing': '<%= t.charge_status.processing %>',
       'done': '<%= t.charge_status.done %>',
       'denied': '<%= t.charge_status.denied %>',
       'refunded': '<%= t.charge_status.refunded%>'
    };

    this.statusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending_confirmation' :
          className = 'pending-status';
          break;
        case 'confirmed':
          className = 'confirmed-status';
          break;
        case 'cancelled':
          className = 'error-status';
          break;          
      }
      return className;
    }

    this.paymentStatusClass = function(entity) {
      var className = null;
      switch (entity.payment_status) {
        case 'none' :
          className = 'pending-status';
          break;
        case 'deposit':
          className = 'doing-status';
          break;
        case 'total':
          className = 'done-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className; 
    }

    this.chargeStatusClass = function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending' :
          className = 'pending-status';
          break;
        case 'processing':
          className = 'doing-status';
          break; 
        case 'done':
          className = 'done-status';
          break;
        case 'denied':
          className = 'error-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className;
    }  


    this.entityKey = function(entity) {
      return entity.id;
    }

    this.onRenderEntities = function(entities) {
      $('.elements-search').show();
      $('.new-entity-button').hide();
    }

    this.onNew = function() {
        $('.new-entity-button').hide();
        this.configForm(null);
    };

    this.onEdit = function(entity) {

      this.configForm(entity);

      $('.new-entity-button').show();
      var self = this;

      // Edit order item
      $('.modify-order-line-button').bind('click', function() {
         self.order_item_id = $(this).attr('rel');
         self.order_item_idx = $(this).attr('data-line-idx');
         if (self.order_item_id) {
          $('#order_item_edition_'+self.order_item_id).on('shown.bs.modal', function () {
             $('#order_item_edition_'+self.order_item_id).height($('#order_item_edition_'+self.order_item_id+' form.update_order_item').height()+120);
              self.setupEditOrderItemForm(entity, self.order_item_idx);
          });
          $('#order_item_edition_'+self.order_item_id).on('hidden.bs.modal', function() {
             $('#order_item_edition_'+self.order_item_id).detach('body');
             $('#order_item_edition_'+self.order_item_id).appendTo('#col_edit_order_item_'+self.order_item_id);
          });

          $('#order_item_edition_'+self.order_item_id).detach('#col_edit_order_item_'+self.order_item_id);
          $('#order_item_edition_'+self.order_item_id).appendTo('body');
          $('#order_item_edition_'+self.order_item_id).modal();
         }
      });

      // Create order item (form)
      $('#create_order_line_button').bind('click', function(){
          $('#create_order_item_container').on('shown.bs.modal', function () {
              $('#create_order_item_container').height($('form[name=add_order_item]').height()+120);
              self.setupNewOrderItemForm();
          });
          $('form[name=add_order_item]')[0].reset();
          $('#create_order_item_container').detach('#dialogs_container');
          $('#create_order_item_container').appendTo('body');
          $('#create_order_item_container').modal();
      });

      // Create order item (wizard)
      $('#new_order_line_button').bind('click', function(){
          window.location.href = '/admin/order/new-order-item-step-1?order=' + entity.id;
      });

      // Create charge
      $('#new_charge').bind('click', function(){
        $('#new_charge_button').unbind('click');
        $('#date').datetimepicker(
            {controlType: 'select', showTimezone: false, useLocalTimezone: true, 
             numberOfMonths:1, dateFormat: 'dd/mm/yy'},
            '<%= session[:locale] %>');
        $('#date').datetimepicker('setDate', new Date());
        $('#amount').autoNumeric('init',{aSep:''});
        $('#new_charge_button').bind('click', function(){
           var formdata = $('form[name="charge"]').formParams(true);
           var json_request = JSON.stringify(formdata);
           $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/order/charge',
               success: function(data, textStatus, jqXHR) {
                 orderManager.model.synchronizeCurrentEntity(data);
                 orderManager.model.change_state('entity_updated_successfully');
                 alert('<%=t.booking_management.charge_form.done%>');
                 $('form[name="charge"]').hide();
               },
               error: function(data, textStatus, jqXHR) {
                 alert('Error updating resource');
               }
           });
        });       
        if ($('form[name="charge"]').is(':visible')) {
          $('form[name="charge"]').hide();
        }
        else {
          $('form[name="charge"]').show();          
        }
      });

    };

    this.configForm = function(entity) {

        $.datepicker.setDefaults( $.datepicker.regional["<%=session[:locale] || 'es'%>" ] );
        this.configValidation();
        this.configTabs();

        $('#reservation_amount_editable').bind('change', function() {
            $('#reservation_amount').val($('#reservation_amount_editable').val());
        });

        // Configure rental
        <% if multiple_rental_locations %>
        var dataSourceRentalLocation = new RemoteDataSource('/api/booking-rental-locations?all=yes',{'id':'code','description':'name'});
        var valueRentalLocation = entity ? entity.rental_location_code : null;
        var selectorRentalLocation = new SelectSelector('rental_location',
            dataSourceRentalLocation, valueRentalLocation, true );
        <% end %>


    }

    this.setupNewOrderItemForm = function() {

        // Setup form validate
        $('form[name="add_order_item"]').data('validator', null);
        $('form[name="add_order_item"]').validate({
            submitHandler: function(form) {
                var data = $(form).formParams(false);
                var json_request = JSON.stringify(data);
                $.ajax({
                    type: 'POST',
                    data : json_request,
                    url : '/api/order/order-item',
                    success: function(data, textStatus, jqXHR) {
                        $('#create_order_item_container').modal('hide');
                        orderManager.model.synchronizeCurrentEntity(data);
                        orderManager.model.change_state('entity_updated_successfully');
                    },
                    error: function(data, textStatus, jqXHR) {
                        alert('Error a√±adiendo linea de pedido');
                    }
                });
                return false;
            },

            rules : {
                'time': {
                    time24: true
                }
            },
            messages : {
                'time': {
                    time24: '<%=t.validations.time_format_invalid%>'
                }
            }
        });

        // Datepicker
        var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];
        //$('#new_order_line_date').datepicker('destroy');
        //$('#new_order_line_date').datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, locale);
        //$('#new_order_line_date').bootstrapDP();
        $('#new_order_line_date').datePicker();

        // Autocomplete
        $("#new_order_line_item_id").autocomplete({
            source: "/api/booking-activities-search",
            minLength: 1,
            select: function( event, ui ) {
                if (ui.item && ui.item.value) {
                    $("#new_order_line_item_id").val(ui.item.value);
                    $("#new_order_line_item_description").val(ui.item.label);
                    var priceDescriptionValueModel = null;
                    var priceDescriptionDataSourceModel = new RemoteDataSource('/api/booking-activities-rate/'+ui.item.value,{'id':'id',
                        'description':'description'});
                    var priceDescriptionSelectorModel = new SelectSelector('new_order_line_item_price_type',
                        priceDescriptionDataSourceModel, priceDescriptionValueModel, true );
                    $('#new_order_line_item_price_type').unbind('change');
                    $('#new_order_line_item_price_type').bind('change', function(){
                        $('#new_order_line_item_price_description').val($('#new_order_line_item_price_type option:selected').text());
                    });
                }
            }
        });
    };

    this.setupEditOrderItemForm = function(entity, idx) {
        var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];

        // Setup form validation
        $('form[name="update_order_item_' + idx + '"]').data('validator', null);
        $('form[name="update_order_item_' + idx + '"]').validate({

            submitHandler: function(form) {

                var data = $(form).formParams(false);

                data.item_custom_payment_allow_deposit_payment = $('#item_custom_payment_allow_deposit_payment_'+entity.order_items[idx].id).is(':checked');
                data.item_custom_payment_allow_total_payment = $('#item_custom_payment_allow_total_payment_'+entity.order_items[idx].id).is(':checked')

                if (data.order_item_customers && data.order_item_customers.length > 0) {
                    var customers = $.map(data.order_item_customers, function (value, index) {
                        return [value];
                    });
                    data.customers = customers;
                }

                var json_request = JSON.stringify(data);

                $.ajax({
                    type: 'PUT',
                    data : json_request,
                    url : '/api/order/order-item',
                    success: function(data, textStatus, jqXHR) {
                        orderManager.model.synchronizeCurrentEntity(data);
                        orderManager.model.change_state('entity_updated_successfully');
                        $('.order_item_edition').modal('hide');
                    },
                    error: function(data, textStatus, jqXHR) {
                        alert('Error modificando linea de pedido');
                    }
                });

                return false;
            },

            rules : {
                'time': {
                    time24: true
                }
            },
            messages : {
                'time': {
                    time24: '<%=t.validations.time_format_invalid%>'
                }
            }

        });

        // Datepicker
        var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];
        //$('#date_'+idx).datepicker('destroy');
        //$('#date_'+idx).datepicker({numberOfMonths:1, dateFormat: 'dd/mm/yy'}, locale);
        //$('#date_'+idx).datepicker('setDate', new Date(entity.order_items[idx].date));
        $('#date_'+idx).val(entity.order_items[idx].date.toString("dd/MM/yyyy"));
        $('#date_'+idx).datePicker();

        // Autocomplete product
        var theId = entity.order_items[idx].id;
        var item_id_input = "#item_id_" + theId;
        var item_description_input = "#item_description_" + theId;
        $(item_id_input).autocomplete({
            source: "/api/booking-activities-search",
            minLength: 1,
            select: function( event, ui ) {
                if (ui.item && ui.item.value) {
                    $(item_id_input).val(ui.item.value);
                    $(item_description_input).val(ui.item.label);
                    var priceDescriptionValueModel = null;
                    var priceDescriptionDataSourceModel = new RemoteDataSource('/api/booking-activities-rate/'+ui.item.value,{'id':'id',
                        'description':'description'});
                    var priceDescriptionSelectorModel = new SelectSelector(item_price_select,
                        priceDescriptionDataSourceModel, priceDescriptionValueModel, true );
                    $('#'+item_price_select).unbind('change');
                    $('#'+item_price_select).bind('change', function(){
                        $('#item_price_description_'+theId).val($('#'+item_price_select+' option:selected').text());
                    });
                }
            }
        });

        // Product price (rate)
        var item_price_select = "item_price_type_" + theId;
        var priceDescriptionValueModel = entity.order_items[idx].item_price_type;
        var priceDescriptionDataSourceModel = new RemoteDataSource('/api/booking-activities-rate/'+entity.order_items[idx].item_id,{'id':'id',
            'description':'description'});
        var priceDescriptionSelectorModel = new SelectSelector(item_price_select,
            priceDescriptionDataSourceModel, priceDescriptionValueModel, true );
        $('#'+item_price_select).unbind('change');
        $('#'+item_price_select).bind('change', function(){
            $('#item_price_description_'+theId).val($('#'+item_price_select+' option:selected').text());
        });

        // Customer pickup place
        var pickupPlaceValueModel = entity.order_items[idx].customers_pickup_place;
        var pickupPlaceDataSourceModel = new RemoteDataSource('/api/booking-activiy-places/'+entity.order_items[idx].item_id,{'id':'name',
            'description':'name'});
        var pickupPlaceSelectorModel = new SelectSelector('customers_pickup_place_'+theId,
            pickupPlaceDataSourceModel, pickupPlaceValueModel, true );

    }

    this.configTabs = function() {

      $("#content > div").hide(); // Initially hide all content
      $("#content_tabs li:first").attr("id","current"); // Activate first tab
      $("#content > div:first").fadeIn(); // Show first tab content
      $('#content_tabs a').click(function(e) {
        e.preventDefault();
        if ($(this).attr("name") == 'preview') {
          ($('#home_frame')[0]).contentWindow.location.reload();
        }
        if ($(this).closest("li").attr("id") == "current"){ //detection for current tab
         return;       
        }
        else{             
          $("#content > div").hide(); //Hide all content
          $("#content_tabs li").attr("id",""); //Reset id's
          $(this).parent().attr("id","current"); // Activate this
          $('#' + $(this).attr('name')).fadeIn(); // Show content for current tab
        }
      });
      
    }

    this.configValidation = function() {
           	 
       	 $('#order_management_form').validate({
       	  	
            submitHandler: function(form) 
            {
               return false;
            },
                 	        	   
       	    rules : { // rules
                'customer_name': {
                    required: true
                },
                'customer_surname': {
                    required: true
                }
       	    },
       	    
       	    messages : { // messages
                'customer_name': {
                    required: '<%=t.booking_management.form.validations.customer_name_required%>'
                },
                'customer_surname': {
                    required: '<%=t.booking_management.form.validations.customer_surname_required%>'
                }
       	    }
       	    
       	  }
       	 );
    	
    	
    }
  	
  };
  
  var urls = { 
  	           query_url  : '/api/orders',
    	         create_url : '/api/order',
  	           update_url : '/api/order',
  	           delete_url : '/api/order',
  	           get_url    : '/api/order'
  	         };
  
  var orderHook = new OrderHook();
  var orderManager = new EntityManagement(urls, 'order', 
      <%= order_page_size %>, orderHook, {prefix: '/admin/order',hold_form_after_action:true});
 
 });